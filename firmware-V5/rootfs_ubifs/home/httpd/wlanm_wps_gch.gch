<%
IMPORT FILE "common_gch.gch";
IMPORT FILE "wlan_driver_gch.gch";
var SETT_OBJNAME      = "OBJ_WLANSETTING_ID";
var SETT_HANDLE;
var SETT_PARANUM      = 9;
var SETT_PARA[9] =
{
"SettingStatus",
"CardIsIn",
"MaxInterface",
"DeviceMode",
"CardMode",
"CardRev",
"Class",
"PID",
"VID"
};
var WPS_OBJNAME = "OBJ_WPS_ID";
var WPS_PARANUM = 13;
var WPS_IDENTITY;
var WPS_HANDLE;
var WPS_PARA[13] =
{
"Enable",
"WPSMode",
"WpsMethodSupported",
"APSetupLocked",
"WPSState",
"ConfigurationError",
"DeviceName",
"DevicePasswordID",
"OOBDevicePassword",
"NumberOfAssociatedRegistrars",
"RegistrarEstablished",
"UUID",
"Version"
};
var WPSPIN_OBJNAME = "OBJ_WPSPIN_ID";
var WPSPIN_PARANUM = 2;
var WPSPIN_IDENTITY;
var WPSPIN_HANDLE;
var WPSPIN_PARA[2] =
{
"NULL",
"WpsPIN"
};
var FP_ERRORSTR = "SUCC";
var FP_ACTION = request("IF_ACTION");
var FP_PIN_OP = request("IF_PIN_OP");
var FP_inputPIN = request("IF_InputPINVal");
var FP_WPSMode, FP_Enable, FP_autoPIN;
if (FP_inputPIN IS NULL)
{
FP_inputPIN = "";
}
query_list("OBJ_WLANCONFIG_ID", getenv("g_wlanSettingID"));
var FP_VIEWID = query_identity(0);
query_list(WPS_OBJNAME, FP_VIEWID);
WPS_IDENTITY = query_identity(0);
WPSPIN_IDENTITY = WPS_IDENTITY;
create_form_start("fSubmit", "");
createBasicHidden();
create_hidden_newpara(SETT_PARA, SETT_PARANUM);
SETT_HANDLE = create_paralist();
get_inst(SETT_HANDLE, SETT_OBJNAME, getenv("g_wlanSettingID"));
cover_hidden(SETT_HANDLE, SETT_PARA, SETT_PARANUM);
destroy_paralist(SETT_HANDLE);
create_hidden_sep("IF_PIN_OP", FP_PIN_OP);
create_hidden_sep("IF_AutoPINVal", "");
create_hidden_sep("IF_InputPINVal", FP_inputPIN);
if( (FP_ACTION == "WPSMode" || FP_ACTION == "InputPIN")
&& (request("_SESSION_TOKEN") != getenv("_SESSION_TOKEN")) )
{
FP_ACTION = "";
FP_ERRORSTR = load_string("cmret_260");
set_hidden("IF_ERRORSTR", FP_ERRORSTR);
}
if (FP_ACTION == "WPSMode")
{
WPS_HANDLE = create_paralist();
for(var i=0; i<WPS_PARANUM; i++)
{
setpara(WPS_HANDLE, WPS_PARA[i]);
}
WPS_IDENTITY = set_inst(WPS_HANDLE, WPS_OBJNAME, WPS_IDENTITY);
}
else if (FP_ACTION == "InputPIN")
{
WPSPIN_HANDLE = create_paralist();
set_para(WPSPIN_HANDLE, "WpsPIN", request("IF_InputPINVal"));
WPSPIN_IDENTITY = set_inst(WPSPIN_HANDLE, WPSPIN_OBJNAME, WPSPIN_IDENTITY);
}
create_hidden_newpara(WPS_PARA, WPS_PARANUM);
WPS_HANDLE = create_paralist();
get_inst(WPS_HANDLE, WPS_OBJNAME, WPS_IDENTITY);
cover_hidden(WPS_HANDLE, WPS_PARA, WPS_PARANUM);
FP_WPSMode = get_para(WPS_HANDLE, "WPSMode");
FP_Enable = get_para(WPS_HANDLE, "Enable");
destroy_paralist(WPS_HANDLE);
if ( FP_Enable=="1" && FP_WPSMode=="1" )
{
if (FP_ACTION != "InputPIN")
{
WPSPIN_HANDLE = create_paralist();
get_inst(WPSPIN_HANDLE, WPSPIN_OBJNAME, WPSPIN_IDENTITY);
FP_autoPIN = get_para(WPSPIN_HANDLE, "WpsPIN");
set_hidden("IF_AutoPINVal", FP_autoPIN);
destroy_paralist(WPSPIN_HANDLE);
}
}
FP_ERRORSTR = getDisplayInstError(FP_ERRORSTR);
FP_ERRORSTR = driver_func(FP_VIEWID, FP_ERRORSTR);
create_form_end();
%>